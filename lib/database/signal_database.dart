import 'package:sqflite/sqflite.dart';
import 'package:path/path.dart';
import '../models/signal_model.dart';

class SignalDatabase {
  static Database? _db;

  static Future<Database> get database async {
    if (_db != null) return _db!;
    _db = await _initDB('signals.db');
    return _db!;
  }

  static Future<Database> _initDB(String file) async {
    final path = join(await getDatabasesPath(), file);
    return await openDatabase(
      path,
      version: 1,
      onCreate: _createDB,
    );
  }

  static Future _createDB(Database db, int version) async {
    // –¢–∞–±–ª–∏—Ü–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
    await db.execute('''
      CREATE TABLE signals (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        ticker TEXT,
        signal TEXT,
        message TEXT,
        open REAL,
        close REAL,
        change_percent REAL,
        eps_growth REAL,
        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
      )
    ''');

    // –¢–∞–±–ª–∏—Ü–∞ —Å–¥–µ–ª–æ–∫ (–ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ)
    await db.execute('''
      CREATE TABLE portfolio (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        ticker TEXT,
        signal_type TEXT,         -- long / short
        price REAL,
        quantity REAL,
        balance_left REAL,
        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
      )
    ''');
  }

  // üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∏–≥–Ω–∞–ª
  static Future<void> insertSignal(SignalModel model) async {
    final db = await database;
    await db.insert('signals', {
      'ticker': model.ticker,
      'signal': model.signal,
      'message': model.message,
      'open': model.open,
      'close': model.close,
      'change_percent': model.changePercent,
      'eps_growth': model.epsGrowth,
    });
  }

  // üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É
  static Future<void> insertPortfolio({
    required String ticker,
    required String signalType, // long / short
    required double price,
    required double quantity,
    required double balanceLeft,
  }) async {
    final db = await database;

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
    final currentBalance = await getCurrentBalance();

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏
    final double positionValue = price * quantity;

    // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–∑–∏—Ü–∏–∏
    double newBalanceLeft;

    if (signalType.toLowerCase() == 'long') {
      // –î–ª—è long –ø–æ–∑–∏—Ü–∏–π –≤—ã—á–∏—Ç–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–∑ –±–∞–ª–∞–Ω—Å–∞
      newBalanceLeft = currentBalance - positionValue;
      print(
          "LONG position opened: Balance $currentBalance - Position $positionValue = $newBalanceLeft");
    } else {
      // –î–ª—è short –ø–æ–∑–∏—Ü–∏–π –±–∞–ª–∞–Ω—Å –Ω–µ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è
      newBalanceLeft = currentBalance;
      print("SHORT position opened: Balance remains $currentBalance");
    }

    print(
        "Position opened: Ticker=$ticker, Type=$signalType, Price=$price, Quantity=$quantity");

    await db.insert('portfolio', {
      'ticker': ticker,
      'signal_type': signalType,
      'price': price,
      'quantity': quantity,
      'balance_left': newBalanceLeft,
      'timestamp': DateTime.now().toIso8601String(),
    });
  }

  // üì• –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–∏–≥–Ω–∞–ª–æ–≤
  static Future<List<SignalModel>> getAllSignals() async {
    final db = await database;
    final result = await db.query('signals', orderBy: 'timestamp DESC');
    return result.map((e) => SignalModel.fromJson(e)).toList();
  }

  // üì• –ü–æ–ª—É—á–∏—Ç—å —Å–¥–µ–ª–∫–∏
  static Future<List<Map<String, dynamic>>> getPortfolioHistory() async {
    final db = await database;
    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏, –≥–¥–µ —Ç–∏–∫–µ—Ä –Ω–µ —Ä–∞–≤–µ–Ω "BALANCE"
    return await db.query('portfolio',
        where: 'ticker != ?',
        whereArgs: ['BALANCE'],
        orderBy: 'timestamp DESC');
  }

  // üì• –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ (–≤–∫–ª—é—á–∞—è –∑–∞–ø–∏—Å–∏ –±–∞–ª–∞–Ω—Å–∞)
  static Future<List<Map<String, dynamic>>> getAllPortfolioRecords() async {
    final db = await database;
    return await db.query('portfolio', orderBy: 'timestamp DESC');
  }

  // üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π —Å–¥–µ–ª–∫–∏ –ø–æ —Ç–∏–∫–µ—Ä—É
  static Future<bool> hasActivePosition(String ticker) async {
    final db = await database;
    final result = await db.query(
      'portfolio',
      where: 'ticker = ?',
      whereArgs: [ticker],
      limit: 1,
    );
    return result.isNotEmpty;
  }

  // üìà –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –ø–æ —Ç–∏–∫–µ—Ä—É
  static Future<Map<String, dynamic>?> getActivePosition(String ticker) async {
    final db = await database;
    final result = await db.query(
      'portfolio',
      where: 'ticker = ? AND signal_type != ?',
      whereArgs: [ticker, 'balance'],
      limit: 1,
    );

    if (result.isEmpty) {
      return null;
    }

    return result.first;
  }

  // üí∞ –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏/—É–±—ã—Ç–∫–∞ –ø–æ –ø–æ–∑–∏—Ü–∏–∏
  static double calculatePnL(
      Map<String, dynamic> position, double currentPrice) {
    final String signalType = position['signal_type'] as String;
    final double entryPrice = position['price'] as double;
    final double quantity = position['quantity'] as double;

    if (signalType.toLowerCase() == 'long') {
      // –î–ª—è long: (—Ç–µ–∫—É—â–∞—è_—Ü–µ–Ω–∞ - —Ü–µ–Ω–∞_–≤—Ö–æ–¥–∞) * –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
      return (currentPrice - entryPrice) * quantity;
    } else if (signalType.toLowerCase() == 'short') {
      // –î–ª—è short: (—Ü–µ–Ω–∞_–≤—Ö–æ–¥–∞ - —Ç–µ–∫—É—â–∞—è_—Ü–µ–Ω–∞) * –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
      return (entryPrice - currentPrice) * quantity;
    }

    return 0.0;
  }

  // üìä –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø—Ä–∏–±—ã–ª–∏/—É–±—ã—Ç–∫–∞
  static double calculatePnLPercent(
      Map<String, dynamic> position, double currentPrice) {
    final String signalType = position['signal_type'] as String;
    final double entryPrice = position['price'] as double;

    if (signalType.toLowerCase() == 'long') {
      // –î–ª—è long: (—Ç–µ–∫—É—â–∞—è_—Ü–µ–Ω–∞ - —Ü–µ–Ω–∞_–≤—Ö–æ–¥–∞) / —Ü–µ–Ω–∞_–≤—Ö–æ–¥–∞ * 100
      return (currentPrice - entryPrice) / entryPrice * 100;
    } else if (signalType.toLowerCase() == 'short') {
      // –î–ª—è short: (—Ü–µ–Ω–∞_–≤—Ö–æ–¥–∞ - —Ç–µ–∫—É—â–∞—è_—Ü–µ–Ω–∞) / —Ü–µ–Ω–∞_–≤—Ö–æ–¥–∞ * 100
      return (entryPrice - currentPrice) / entryPrice * 100;
    }

    return 0.0;
  }

  // üßπ –û—á–∏—Å—Ç–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã
  static Future<void> clear() async {
    final db = await database;
    await db.delete('signals');
  }

  // üßπ –û—á–∏—Å—Ç–∏—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
  static Future<void> clearPortfolio() async {
    final db = await database;
    await db.delete('portfolio');
  }

  // üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
  static Future<void> addPortfolioEntry(Map<String, dynamic> entry) async {
    final db = await database;

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
    final balanceResult = await db.query(
      'portfolio',
      columns: ['balance_left'],
      orderBy: 'id DESC',
      limit: 1,
    );

    double currentBalance = 1000.0; // –ë–∞–ª–∞–Ω—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if (balanceResult.isNotEmpty) {
      currentBalance = balanceResult.first['balance_left'] as double;
    }

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏
    final double quantity = entry['quantity'] as double;
    final double price = entry['price'] as double;
    final double positionValue = quantity * price;

    // –í—ã—á–∏—Ç–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–∑ –±–∞–ª–∞–Ω—Å–∞
    final double balanceLeft = currentBalance - positionValue;

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º
    await db.insert('portfolio', {
      'ticker': entry['ticker'],
      'signal_type': entry['signal_type'],
      'price': price,
      'quantity': quantity,
      'balance_left': balanceLeft,
      'timestamp': DateTime.now().toIso8601String(),
    });
  }

  // üö´ –ó–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é –ø–æ —Ç–∏–∫–µ—Ä—É
  static Future<void> closePositionByTicker(
      String ticker, double closePrice) async {
    final db = await database;

    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
    final position = await getActivePosition(ticker);
    if (position == null) {
      return; // –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
    final double quantity = position['quantity'] as double;
    final double entryPrice = position['price'] as double;
    final String signalType = position['signal_type'] as String;

    // –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–ø–∏—Å–∏
    final int id = position['id'] as int;

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
    final double currentBalance = await getCurrentBalance();

    // –°—É–º–º–∞, –≤–ª–æ–∂–µ–Ω–Ω–∞—è –≤ –ø–æ–∑–∏—Ü–∏—é
    final double investedAmount = quantity * entryPrice;

    // –°—É–º–º–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏
    final double closingAmount = quantity * closePrice;

    // –†–∞—Å—á–µ—Ç P&L
    double pnl = 0.0;
    double updatedBalance = 0.0;

    if (signalType.toLowerCase() == 'long') {
      // –î–ª—è LONG: P&L = (–¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è - –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞) * –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
      pnl = (closePrice - entryPrice) * quantity;

      // –í–ê–ñ–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –∫ –±–∞–ª–∞–Ω—Å—É —Å—É–º–º—É –∑–∞–∫—Ä—ã—Ç–∏—è
      // (–≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ + –¥–æ–±–∞–≤–ª—è–µ–º P&L)
      updatedBalance = currentBalance + closingAmount;

      print(
          "LONG position closed: Balance $currentBalance + Closing $closingAmount = $updatedBalance");
    } else {
      // –î–ª—è SHORT: P&L = (–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞ - –¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è) * –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
      pnl = (entryPrice - closePrice) * quantity;

      // –î–ª—è SHORT –ø–æ–∑–∏—Ü–∏–π –º—ã –Ω–µ –≤—ã—á–∏—Ç–∞–ª–∏ –¥–µ–Ω—å–≥–∏ –∏–∑ –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏,
      // –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–±—ã–ª—å
      updatedBalance = currentBalance + pnl;

      print(
          "SHORT position closed: Balance $currentBalance + P&L $pnl = $updatedBalance");
    }

    print(
        "Position closed: Ticker=$ticker, Entry=$entryPrice, Close=$closePrice, P&L=$pnl");

    // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –ø–æ–∑–∏—Ü–∏–∏
    await db.delete(
      'portfolio',
      where: 'id = ?',
      whereArgs: [id],
    );

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º
    await db.insert('portfolio', {
      'ticker': 'BALANCE',
      'signal_type': 'balance',
      'price': 0.0,
      'quantity': 0.0,
      'balance_left': updatedBalance,
      'timestamp': DateTime.now().toIso8601String(),
    });
  }

  // üí∞ –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
  static Future<double> getCurrentBalance() async {
    final db = await database;
    final result = await db.query(
      'portfolio',
      columns: ['balance_left', 'timestamp', 'ticker', 'signal_type'],
      orderBy: 'timestamp DESC',
      limit: 1,
    );

    if (result.isEmpty) {
      print("No balance record found, returning default balance 1000.0");
      return 1000.0; // –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
    }

    final balanceRecord = result.first;
    final double balance = balanceRecord['balance_left'] as double;
    final String ticker = balanceRecord['ticker'] as String;
    final String type = balanceRecord['signal_type'] as String;
    final String timestamp = balanceRecord['timestamp'] as String;

    print(
        "Current balance: $balance (from record: ticker=$ticker, type=$type, time=$timestamp)");

    return balance;
  }

  // üì• –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –±–µ–∑ —É—á–µ—Ç–∞ –∑–∞–ø–∏—Å–µ–π –±–∞–ª–∞–Ω—Å–∞
  static Future<List<Map<String, dynamic>>> getActivePositions() async {
    final db = await database;
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–∏, –≥–¥–µ —Ç–∏–∫–µ—Ä –ù–ï —Ä–∞–≤–µ–Ω "BALANCE" –∏ —Ç–∏–ø –ù–ï —Ä–∞–≤–µ–Ω "balance"
    return await db.query('portfolio',
        where: 'ticker != ? AND signal_type != ?',
        whereArgs: ['BALANCE', 'balance'],
        orderBy: 'timestamp DESC');
  }
}
